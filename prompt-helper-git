#!/usr/bin/env perl
# Add git status information to prompt

use strict;
use warnings;
no warnings 'uninitialized';

my $red      = '\[\e[38;5;9m\]';
my $grey     = '\[\e[38;5;243m\]';
my $green    = '\[\e[38;5;2m\]';
my $blue     = '\[\e[38;5;6m\]';
my $no_color = '\[\e[33;0;m\]';

# test data
my $git = <<'git';
# branch.oid <commit>
# branch.head branch
# branch.upstream upstream/branch
# branch.upstream branch
# branch.ab +3 -3
u unmerged
1 changed
2 renamed
? untracked
! ignored
git

$git = `git status --branch --porcelain=v2 2>/dev/null` || exit;

my ($branch)   = $git =~ /^# branch.head (.+)$/gm;
my ($upstream) = $git =~ /^# branch.upstream (.+)$/gm;
my ($remote, $remote_branch) = $upstream =~ /(.+?)\/(.+)/;
($remote_branch) = $upstream if ! $remote_branch;
my ($ahead, $behind)   = $git =~ /^# branch.ab (\+.+) (\-.+)$/gm;
# ignored is only shown if specified with git status --ignored
my ($changes) = $git =~ /^[u12\?\!]/m;

# my $project = `git rev-parse --show-toplevel 2>/dev/null`;
# ($project) = $project =~ /.*\/([^\/]+)\n/;

my $branch_color = $red if $branch eq '(detached)';
my $branch_info =  ($remote_branch . $ahead . $behind ne '' || $branch eq '(detached)' ? '@' . $branch_color . $branch . $no_color : '' );
$branch_info = '' if $branch eq $remote_branch;

my ($branch_prefix) = $branch =~ /^((.*?\/)*.{1,8})/;
if($branch eq '(detached)') {
  $branch_prefix = $branch;
}

print ""
  . $grey
  # . "| "
  # . $project
  . ($changes ? $red . '@' . $grey : '@')
  . $branch_color . $branch_prefix . $grey
  . ($ahead ne '+0' ? $red . $ahead . $grey : '')
  . ($behind ne '-0' ? $red . $behind . $grey : '' )
  . ($remote_branch && $remote_branch ne $branch ? '=>' . $red . $remote_branch . $grey : '' )
  # . " |"
  . $no_color
;
